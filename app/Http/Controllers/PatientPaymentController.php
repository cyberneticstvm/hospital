<?php

namespace App\Http\Controllers;

use App\Models\Branch;
use App\Helper\Helper;
use Illuminate\Support\Facades\Auth;
use Illuminate\Http\Request;
use App\Models\PatientPayment as PP;
use App\Models\PatientPayment;
use App\Models\PatientReference as PR;
use App\Models\PatientReference;
use App\Models\PatientRegistrations;
use App\Models\PatientSurgeryConsumable;
use Carbon\Carbon;
use DB;

class PatientPaymentController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    private $branch;

    function __construct()
    {
        $this->middleware('permission:patient-payments-list|patient-payments-create|patient-payments-edit|patient-payments-delete', ['only' => ['index', 'store']]);
        $this->middleware('permission:patient-payments-list', ['only' => ['index']]);
        $this->middleware('permission:patient-payments-create', ['only' => ['store']]);
        $this->middleware('permission:patient-payments-edit', ['only' => ['edit', 'update']]);
        $this->middleware('permission:patient-payments-delete', ['only' => ['destroy']]);
        $this->middleware('permission:patient-outstanding-register', ['only' => ['oustandingDue', 'oustandingDueFetch']]);
        $this->middleware('permission:patient-transaction-history', ['only' => ['transactionHistory', 'transactionHistoryFetch']]);

        $this->branch = session()->get('branch');
    }
    public function index()
    {
        $incomes = PP::leftJoin('patient_medical_records as pmr', 'patient_payments.medical_record_id', '=', 'pmr.id')->leftJoin('patient_registrations as pr', 'pmr.patient_id', '=', 'pr.id')->leftJoin('payment_modes as pm', 'pm.id', '=', 'patient_payments.payment_mode')->leftJoin('branches as b', 'b.id', 'patient_payments.branch')->select("b.branch_name", "patient_payments.id", "patient_payments.amount", "patient_payments.medical_record_id", "patient_payments.notes", "pm.name", "pr.patient_name", "pr.patient_id", "patient_payments.type")->where('patient_payments.branch', $this->branch)->where('patient_payments.medical_record_id', '>', 0)->whereDate('patient_payments.created_at', Carbon::today())->orderByDesc("patient_payments.id")->get();
        return view('patient-payment.index', compact('incomes'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'amount' => 'required',
            'payment_mode' => 'required',
            'medical_record_id' => 'required',
        ]);
        $input = $request->all();
        $input['created_by'] = Auth::user()->id;
        $check = $this->checkMedicalRecordID($request->medical_record_id);
        if ($check == 1):
            $pp = PP::create($input);
            return redirect()->route('patient-payment.index')->with('success', 'Payment recorded successfully');
        elseif ($check == 2):
            return redirect()->route('patient-payment.index')->with('error', 'You are trying to record the payment with old Medical Record ID.');
        else:
            return redirect()->route('patient-payment.index')->with('error', 'You are trying to record the payment for Medical Record ID generated by another branch.');
        endif;
    }

    private function checkMedicalRecordID($mrid)
    {
        $check = 1;
        $ref = PR::where('id', $mrid)->where('branch', $this->branch)->first();
        if ($ref):
            $ref1 = PR::where('id', $mrid)->where('branch', $this->branch)->whereDate('created_at', Carbon::today())->first();
            if (!$ref1):
                $check = 2; // Branch Okay. But old MR
            endif;
        else:
            $check = 3; // Not the same brach or invalid MR
        endif;
        return $check;
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(Request $request)
    {
        $this->validate($request, [
            'medical_record_id' => 'required',
        ]);
        $heads = DB::table('income_expense_heads')->where('type', 'I')->where('category', 'patient')->orderBy('name')->get();
        $pmodes = DB::table('payment_modes')->whereIn('id', [1, 2, 3, 4, 5, 6, 7])->orderBy('name')->get();
        $types = DB::table('payment_modes')->whereIn('id', [8, 9])->orderBy('name')->get();
        $medical_record_id = $request->medical_record_id;
        $patient = DB::table('patient_registrations as pr')->leftJoin('patient_medical_records as pmr', 'pmr.patient_id', '=', 'pr.id')->where('pmr.id', $request->medical_record_id)->select('pr.id', 'pr.patient_name', 'pr.patient_id', 'pmr.branch', DB::raw("DATE_FORMAT(pmr.created_at, '%d/%b/%Y') AS cdate"))->first();

        $reg_fee = DB::table('patient_medical_records as pmr')->leftJoin('patient_registrations as pr', 'pmr.patient_id', '=', 'pr.id')->leftJoin('patient_references as pref', 'pref.id', 'pmr.mrn')->where('pref.review', 'no')->where('pmr.id', $request->medical_record_id)->value('pr.registration_fee');

        $consultation_fee = DB::table('patient_medical_records as pmr')->leftJoin('patient_references as pr', 'pmr.mrn', '=', 'pr.id')->where('pmr.id', $request->medical_record_id)->where('pr.discount', 0)->value('pr.doctor_fee');

        $procedure_fee = DB::table('patient_procedures as pp')->leftJoin('patient_medical_records as pmr', 'pp.medical_record_id', '=', 'pmr.id')->where('pmr.id', $request->medical_record_id)->sum('fee');

        $certificate_fee = DB::table('patient_certificates as pc')->leftJoin('patient_certificate_details as pcd', 'pc.id', '=', 'pcd.patient_certificate_id')->where('pc.medical_record_id', $request->medical_record_id)->where('pcd.status', 'I')->sum('pcd.fee');

        $pharmacy = DB::table('patient_medicine_records')->where('medical_record_id', $request->medical_record_id)->sum('total');
        $vision = DB::table('spectacles')->where('medical_record_id', $request->medical_record_id)->sum('fee');

        $clinical_lab = DB::table('lab_clinics')->where('medical_record_id', $request->medical_record_id)->where('tested_from', 1)->sum('fee');

        $radiology_lab = DB::table('lab_radiologies')->where('medical_record_id', $request->medical_record_id)->where('tested_from', 1)->sum('fee');

        $surgery_medicine = DB::table('post_operative_medicine_details as d')->leftjoin('post_operative_medicines as m', 'm.id', 'd.pom_id')->where('m.type', 'surgery')->where('m.medical_record_id', $request->medical_record_id)->sum('d.total');

        $postop_medicine = DB::table('post_operative_medicine_details as d')->leftjoin('post_operative_medicines as m', 'm.id', 'd.pom_id')->where('m.type', 'postop')->where('m.medical_record_id', $request->medical_record_id)->sum('d.total');

        $surgery_consumables = PatientSurgeryConsumable::where('medical_record_id', $request->medical_record_id)->sum('total_after_discount');

        $payments = PP::where('medical_record_id', $request->medical_record_id)->leftJoin('payment_modes as p', 'patient_payments.payment_mode', '=', 'p.id')->select('patient_payments.id', 'patient_payments.amount', 'patient_payments.notes', 'p.name')->get();

        $fee = array($certificate_fee, $clinical_lab, $consultation_fee, $pharmacy, $postop_medicine, $procedure_fee, $radiology_lab, $reg_fee, $surgery_consumables, $surgery_medicine, $vision);
        $tot = $reg_fee + $consultation_fee + $procedure_fee + $certificate_fee + $pharmacy + $radiology_lab + $clinical_lab + $vision + $surgery_medicine + $postop_medicine + $surgery_consumables;
        if ($patient):
            return view('patient-payment.fetch', compact('patient', 'medical_record_id', 'heads', 'pmodes', 'fee', 'tot', 'payments', 'types'));
        else:
            return redirect()->back()->with('error', 'No records found.');
        endif;
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $payment = PP::find($id);
        $pmodes = DB::table('payment_modes')->whereIn('id', [1, 2, 3, 4, 5, 6, 7])->orderBy('name')->get();
        $types = DB::table('payment_modes')->whereIn('id', [8, 9])->orderBy('name')->get();
        $patient = DB::table('patient_registrations')->find($payment->patient_id);
        return view('patient-payment.edit', compact('payment', 'pmodes', 'patient', 'types'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'amount' => 'required',
            'payment_mode' => 'required',
            'medical_record_id' => 'required',
        ]);
        $input = $request->all();
        $created_at = (!empty($request->created_at)) ? Carbon::createFromFormat('d/M/Y', $input['created_at'])->format('Y-m-d H:i:s') : Carbon::now();
        $pp = PP::where('id', $id)->update(['amount' => $request->amount, 'payment_mode' => $request->payment_mode, 'type' => $request->type, 'notes' => $request->notes, 'created_at' => $created_at]);
        return redirect()->route('patient-payment.index')->with('success', 'Payment updated successfully');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        PP::find($id)->delete();
        return redirect()->route('patient-payment.list')
            ->with('success', 'Payment deleted successfully');
    }

    public function oustandingDue()
    {
        $branches = Branch::all();
        $outstandings = [];
        $brn = 0;
        $inputs = [];
        return view('patient-payment.outstanding-due', compact('branches', 'outstandings', 'brn', 'inputs'));
    }

    public function oustandingDueFetch(Request $request)
    {
        $this->validate($request, [
            'fromdate' => 'required',
            'todate' => 'required',
            'branch' => 'required',
        ]);
        $branches = Branch::all();
        $brn = $request->branch;
        $outstandings = [];
        $inputs = array($request->fromdate, $request->todate);

        $startDate = Carbon::createFromFormat('d/M/Y', $request->fromdate)->startOfDay();
        $endDate = Carbon::createFromFormat('d/M/Y', $request->todate)->endOfDay();
        if ($startDate->diffInDays($endDate) <= 62):
            $refs = PatientReference::where('branch', $brn)->whereBetween('created_at', [$startDate, $endDate])->get();
            foreach ($refs as $key => $val):
                $owed = Helper::getOwedTotal($val->id);
                $paid = Helper::getPaidTotal($val->id);
                if ($owed - $paid > 0):
                    $outstandings[] = [
                        'due' => $owed,
                        'received' => $paid,
                        'balance' => $owed - $paid,
                        'patient_name' => $val->patient->patient_name,
                        'patient_id' => $val->patient_id,
                    ];
                endif;
            endforeach;
        else:
            return redirect()->back()->with('error', 'Date range should not be more than 62 days.');
        endif;
        //$outstandings = PatientPayment::selectRaw("SUM(CASE WHEN type = 8 THEN amount END) AS due, SUM(CASE WHEN type = 9 THEN amount END) AS received, SUM(IF(type=8, amount, 0))-SUM(IF(type=9, amount, 0)) AS balance, patient_id")->where('branch', $brn)->groupBy('patient_id')->having('balance', '>', 0)->get();
        return view('patient-payment.outstanding-due', compact('branches', 'outstandings', 'brn', 'inputs'));
    }

    public function transactionHistory()
    {
        $mrns = collect();
        $patient = [];
        return view('patient-payment.transaction-history', compact('mrns', 'patient'));
    }

    public function transactionHistoryFetch(Request $request)
    {
        $this->validate($request, [
            'patient_id' => 'required',
        ]);
        $patient = PatientRegistrations::findOrFail($request->patient_id);
        $mrns = PR::where('patient_id', $request->patient_id)->latest()->get();
        return view('patient-payment.transaction-history', compact('mrns', 'patient'));
    }

    public function patientTransactionHistoryFetch($id)
    {
        $patient = PatientRegistrations::findOrFail($id);
        $mrns = PR::where('patient_id', $id)->latest()->get();
        return view('patient-payment.transaction-history', compact('mrns', 'patient'));
    }
}
